package com.basics.java.fundamentals.thread;

/*
 * Every thread in java has priority. It may be default priority generated by jvm or customized priority provided by programmer
 * Range of thread priority: 1-10
 * Min: 1 
 * Max: 10
 * Thread schedulers will use the priorities to allocate processor. Thread with highest priority will get chance prior to the one having less priority
 * Thread having same priority will be allocated processors based on thread scheduler. It can Round Robin, FCS etc.
 * Default priority only for main thread is 5
 * Default priority for thread is inherited from its parent thread.
 * Some OS doesn't support thread priorities
 * Methods to prevent thread execution:
 * - yield:Current executing thread will pause execution to give chance to other thread with same priority in line using yield method.If other threads are having less priority then current thread can continue its execution.
 *   - prototype: public static native void yield()
 *   - If a running thread calls yield method, it goes back to READY/RUNNABLE method
 *   - Yield method is to be called by the thread requiring more execution time.
 *   - Some platforms doesn't support yield platform
 * - join: If thread wants to wait until complete execution of current thread, then we can go for join method.The thread calling join method will immediately go to wait state.Once execution of the thread is completed, the waiting thread can continue its execution. 
 *   - if thread t1 has to wait for the execution of thread t2, then t1 has to call t1.join() method.
 *   - prototype: public final void join()
 *   - join(long milliseconds): wait the thread execution till provided time
 *   - join(long milliseconds, int nanoseconds)
 *   - InterruptedException: Every join method throws this exception which is checked exception.This is caused when the thread in the waiting state is interrupted
 *   - waiting state is also called as blocked for joining
 *   - If a thread comes out of waiting state , it will go back to ready/runnable state.
 * - sleep:
 * */
public class ThreadPrioritiesandMethods {

    public static void main(String[] args) {
         MyThread t = new MyThread();
         t.setPriority(7); t.start();
         System.out.println(Thread.currentThread().getPriority());
         //Thread.currentThread().setPriority(12); // IllegalArgumentException asrange is 1-10; 
         Thread.currentThread().setPriority(6); Thread.yield();
         System.out.println(Thread.currentThread().getPriority());
         System.out.println("Min priority: "+ Thread.MIN_PRIORITY);
        //System.out.println("Max priority: "+ Thread.MAX_PRIORITY);
        //System.out.println("Normal priority: "+ Thread.NORM_PRIORITY);
    }
}

class MyThread extends Thread {
    public void run() {
        System.out.println(Thread.currentThread().getPriority());
        System.out.println("Child Thread Nigga!");
    }
}